{"version":3,"file":"index.js","sources":["../src/com/cngr/multivaluemap/Collection.js","../src/com/cngr/multivaluemap/MultiValuedMap.js","../src/com/cngr/multivaluemap/index.js"],"sourcesContent":["/*\n * Copyright (c) 2021, Philip A Senger (https://github.com/psenger/multivaluemap/blob/development/LICENSE)\n */\n'use strict'\n\nconst isNill = (value) => value === null || value === undefined;\nconst not = (fn) => (...args) => !fn(...args)\nconst isSet = not(isNill);\n\n/**\n * Abstract class `Collection` must be implemented to be passed as the `option.valueType` in the\n * MulitValueMap class constructor. This abstract class defines the behavior of the values stored\n * in the MultiValueMap. When constructed, the `creator` parameter, a JavaScript Class,  will be\n * called with the `new` operator and stored in a private variable, a reference variable, called\n * `this._proxyObject`\n * @param {Class} creator - the class to construct internally\n * @version 1.1.1\n */\nclass Collection {\n\n  constructor(creator) {\n    this._proxyObject = new creator();\n  }\n\n  /**\n   * Setting the value hides the implementation and off loads the behavior to the Proxy\n   * Object.Each backing proxy has different behaviors.\n   * @abstract\n   * @param {*} value - Passing the value as Null or Undefined are ignored.\n   */\n  setValue(value) {\n    throw new Error(\"This method must be overwritten!\");\n  }\n\n  /**\n   * Get the values from the Proxy Object, as a shallow copy array.\n   * @abstract\n   * @returns {*[]} All sub classes return a shallow copy array of the values\n   */\n  getValue() {\n    throw new Error(\"This method must be overwritten!\");\n  }\n\n  /**\n   * Iterator\n   * @abstract\n   */\n  [Symbol.iterator]() {\n    throw new Error(\"This method must be overwritten!\");\n  }\n}\n\n/**\n * An Array Collection, is just that, an array. This means there can be duplicated values.\n * @constructor\n */\nclass ArrayCollection extends Collection {\n\n  constructor() {\n    super(Array);\n  }\n\n  /**\n   * Push a new value into the proxy array object.\n   * @augments Collection\n   * @param {*} value - if you push null or undefined, it is ignored.\n   */\n  setValue(value) {\n     if ( isSet(value) ) {\n       this._proxyObject.push(value)\n     }\n  }\n\n  /**\n   * Gets a shallow copied array of the array of objects.\n   * @augments Collection\n   * @return {*[]} - an array of objects.\n   */\n  getValue() {\n    return [ ...this._proxyObject ];\n  }\n\n  [Symbol.iterator]() {\n    return this._proxyObject[Symbol.iterator]();\n  }\n}\n\n/**\n * A Set collection enforces uniqueness IFF the values are primitives ( sorry this is JavaScript\n * not Java ).\n * @constructor\n */\nclass SetCollection extends Collection {\n\n  constructor() {\n    super(Set);\n  }\n\n  /**\n   * Add a new Value to the Set.\n   * @augments Collection\n   * @param {*} value - if you push null or undefined, it is ignored.\n   */\n  setValue(value) {\n    isSet(value) ? this._proxyObject.add(value) : undefined;\n  }\n\n  /**\n   * Get an Array ( a shallow copy ) of the values of the Set.\n   * @augments Collection\n   * @returns {*[]} All sub classes return an array of the values\n   */\n  getValue() {\n    return Array.from(this._proxyObject);\n  }\n\n  [Symbol.iterator]() {\n    return this._proxyObject[Symbol.iterator]();\n  }\n\n}\n\nmodule.exports = {\n  Collection,\n  ArrayCollection,\n  SetCollection,\n};\n","/*\n * Copyright (c) 2021, Philip A Senger (https://github.com/psenger/multivaluemap/blob/development/LICENSE)\n */\n\n'use strict'\n\nconst {ArrayCollection} = require(\"./Collection\");\n\n/**\n * A MultiValuedMap constructor option\n * @typedef {Object} MultiValuedMapOption\n * @property {Collection} valueType - Indicates the value class and implements the `Collection`\n */\n\n/**\n * MultiValuedMap is an ADT ( Advanced Data Type ) and based on Apache Commons Collections.\n * While a Map or Dictionary's keys are associated with a single values, each MultiValueMap's\n * key has multiple values. The cardinality of the values stored can be composed with the\n * property `option.valueType` or building a class that extends the abstract class `Collection`.\n * The default `option.valueType` is an `ArrayCollection`.\n * @version 1.1.1\n * @see {@link https://en.wikipedia.org/wiki/Abstract_data_type|wikipedia} for further\n * information on Advanced Data Types\n * @see {@link https://en.wikipedia.org/wiki/Multimap|wikipedia} for further information on MultiMap\n * @param {Iterable} [iterable] - An Array or other iterable object whose elements are\n * key-value pairs (arrays with two elements, e.g. [[ 1, ['one','two'] ],[ 2, ['three'] ]]).\n * Each key-value pair is added to the new Map; null values are treated as undefined.\n * @param {MultiValuedMapOption} [options={}] - An option object literal.\n * @param {Collection} [options.valueType={ArrayCollection}] - A decorator, that can be\n * called to supply a value for the collection of values. Optional and defaults to Array\n * @constructs MultiValuedMap\n * @class {MultiValuedMap}\n * @example\n * const ar = [['a',[1,2,2]],['b',[1,1]]];\n * const a = new MultiValueMap();\n * const a = new MultiValueMap( ar );\n * const a = new MultiValueMap( ar, { valueType: ArrayCollection });\n * const b = new MultiValueMap( ar, { valueType: SetCollection });\n * const b = new MultiValueMap( null, { valueType: SetCollection });\n */\nclass MultiValuedMap {\n\n  constructor(iterable, options = {} ) {\n    this._valueType = options?.valueType || ArrayCollection;\n    this.map = new Map()\n    if (iterable) {\n      if (typeof iterable[Symbol.iterator] !== 'function') {\n        throw new TypeError(`${iterable} is not iterable`)\n      } else {\n        for (const kvp of iterable) {\n          if (typeof (kvp.entries) === 'undefined') {\n            throw new TypeError(`Iterator value a is not an entry object`)\n          }\n          const [key, values] = kvp\n          if (Array.isArray(values)) {\n            values.forEach(value => {\n              this.set(key, value)\n            })\n          } else {\n            this.set(key, values)\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Sets the value for the key in the Map object. Returns the Map object reference for chaining.\n   * @param {*} key - the key\n   * @param {*} value - the value\n   * @returns {MultiValuedMap}\n   * @example\n   * const mvm = new MultiValueMap(preData,{ valueType: SetCollection })\n   * mvm.set('D', 'E')\n   */\n  set(key, value) {\n    const existingValue = this.map.get(key) || new this._valueType()\n    existingValue.setValue(value)\n    this.map.set(key, existingValue) // the only reason I need to do this, if the existingValue doesnt exist\n    return this\n  }\n\n  /**\n   * Set All values.\n   * @param {*} key - the key\n   * @param {Iterable} values - values to feed.\n   * @returns {MultiValuedMap}\n   * @example\n   * const mvm = new MultiValueMap(preData,{ valueType: SetCollection })\n   * mvm.setAll('F',['G','H','H','H'])\n   */\n  setAll(key, values = []) {\n    if (typeof values[Symbol.iterator] !== 'function') {\n      throw new TypeError(`values is not iterable`)\n    }\n    for(let value of values) {\n      this.set(key, value)\n    }\n    return this\n  }\n\n  /**\n   * Returns the number of key/value pairs in the `MultiValueMap` object.\n   * @returns {number}\n   * @example\n   * const mvm = new MultiValueMap(preData,{ valueType: SetCollection })\n   * mvm.set('D', 'E')\n   * mvm.set('D', 'E')\n   * mvm.set('D', 'E')\n   * mvm.setAll('F',['G','H','H','H'])\n   * console.log('mvm.size=', mvm.size); // mvm.size= 3\n   */\n  get size() {\n    return this.map.size\n  }\n\n  /**\n   * Returns a boolean asserting whether a value has been associated to the key in the `MultiValueMap` object or not.\n   * @param {*} key - the key\n   * @returns {boolean} - indicates a value exists in the MultiValueMap\n   * @example\n   * if ( ! mvm.has('non existing') ) {\n   *   console.log('not here');\n   * }\n   * if ( mvm.has('D') ) {\n   *   console.log('here');\n   * }\n   */\n  has(key) {\n    return this.map.has(key)\n  }\n\n  /**\n   * Returns true if an element in the `MultiValueMap` object existed and has been removed, or false if the element does not exist. It will return false afterwards.\n   * @param {*} key - the key\n   * @returns {boolean} - true indicates the value was found and deleted\n   * @example\n   * if ( ! mvm.delete('A') ) {\n   *   console.log('A was not deleted');\n   * }\n   */\n  delete(key) {\n    return this.map.delete(key)\n  }\n\n  /**\n   * Removes all key/value pairs from the Multi Value Map object.\n   * @example\n   * mvm.clear()\n   */\n  clear() {\n    this.map.clear()\n  }\n\n  /**\n   * Returns a new Iterator object that contains an array of [key, [value]] for each element in the Map object in insertion order.\n   * @returns {IterableIterator<K>}\n   */\n  keys() {\n    return this.map.keys()\n  }\n\n  /**\n   * Return all the values in the Map.\n   * @return {IterableIterator<any>} - An iterable value, composed of what ever values or value\n   * was inserted into the map.\n   */\n  values() {\n    return this.map.values()\n  }\n\n  /**\n   * The entries in the map, key value pair.\n   * @return {IterableIterator<[any, IterableIterator<any>]>}\n   * @example\n   * const data = [\n   *    [ 'a', ['1','2','3'] ],\n   *    [ 'b', ['4'] ],\n   *    [ 'c', ['5','6'] ]\n   * ]\n   * const mvn = new MultiValueMap(data);\n   * for (let [key, values] of mvn.entries()) {\n   *   console.log(key, values.getValue());\n   * }\n   * > a [ '1', '2', '3' ]\n   * > b [ '4' ]\n   * > c [ '5', '6' ]\n   */\n  entries() {\n    return this.map.entries()\n  }\n\n  /**\n   * get the values associated with the key.\n   * @param {*} key - The key\n   * @return {*|null}\n   * @example\n   * const mvm = new MultiValueMap([iterable])\n   * mvm.set('Captain Marvel', 'Carol Danvers')\n   * const value = mvm.get('Captain Marvel')\n   * console.log( value ) // ['Carol Danvers']\n   */\n  get(key) {\n    return this.map.get(key)?.getValue() || null;\n  }\n\n  forEach(callBackFunction, thisArg) {\n    const cb = callBackFunction.bind(thisArg)\n    const self = this\n    this.map.forEach((value, key) => cb(value.getValue(), key, self), thisArg)\n  }\n\n  [Symbol.iterator]() {\n    const iterator = this.map.keys()\n    const getValue = key => {\n      return this.map.get(key).getValue()\n    }\n    return {\n      next() {\n        const { value: key, done } = iterator.next()\n        if (done) {\n          return { value: [], done: true }\n        }\n        return { value: [key, getValue(key)], done: false }\n      }\n    }\n  }\n}\n\nmodule.exports = MultiValuedMap\n","/*\n * Copyright (c) 2021, Philip A Senger (https://github.com/psenger/multivaluemap/blob/development/LICENSE)\n */\n\n'use strict'\n\nconst Collection = require('./Collection');\nconst MultiValueMap = require('./MultiValuedMap');\n\nmodule.exports = {\n  MultiValueMap,\n  ArrayCollection: Collection.ArrayCollection,\n  SetCollection: Collection.SetCollection,\n  Collection: Collection.Collection,\n}\n"],"names":["Collection","ArrayCollection","require$$0","require$$1"],"mappings":"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"}